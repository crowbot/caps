#!/bin/bash

# abort on any errors
set -e

# check that we are in the expected directory
cd `dirname $0`/..

# Get environment variables, if they exist.
ENV_FILE=${ENV_FILE:-../env.sh}
if [ -f "$ENV_FILE" ]; then
  echo "==> Loading environment from ${ENV_FILE}"
  source $ENV_FILE
fi

# Argument handling.
# The default action when called without an argument is "start"
ACTION=$1
[ -n "$ACTION" ] || ACTION="start"

SWARM=$(docker info 2>/dev/null | grep '^ Swarm' | awk '{ print $NF }')
SWARM=${SWARM:-inactive}
echo "==> Swarm mode is ${SWARM}"

if [ "$SWARM" = "active" ] ; then
  script/build
  case $ACTION in
    start | --start)
      echo "==> Deploying Swarm stack ${STACK}..."
      docker stack deploy -c ${PWD}/docker-compose.yml ${STACK}
      ;;
    stop | --stop)
      echo "==> Stopping Swarm stack ${STACK}..."
      docker stack rm ${STACK}
      ;;
    reload | --reload)
      echo "==> Reloading Swarm service ${STACK}_app..."
      docker service update --force ${STACK}_app
      ;;
    restart | --restart)
      echo "==> Full restart of Swarm stack ${STACK}..."
      docker stack rm ${STACK}
      while  docker network ls | grep ${STACK} ; do
        echo "==> Waiting for network to clear..."
        sleep 2
      done
      docker stack deploy -c ${PWD}/docker-compose.yml ${STACK}
      ;;
    status | --status)
      echo "==> Checking status of stack ${STACK}..."
      docker stack ps ${STACK}
      ;;
    *)
      echo '==> Unknown option in Swarm mode.'
      exit 1
      ;;
  esac
else
  script/migrate
  python3 manage.py runserver 0.0.0.0:8000
fi
